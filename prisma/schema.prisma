generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Gender {
  male
  female
  lgbtq
}

enum BookingStatus {
  pending
  active
  completed
}

enum PaymentWay {
  booking
  walkin
}

enum CouponStatus {
  pending
  active
  expired
  redeemed
}

enum DiscountType {
  money
  percent
}

enum VatPayType {
  customer
  museum
}

enum CouponType {
  percent
  price
}

enum Status {
  pending
  success
  failure
}

enum AgeGroup {
  child
  adult
}

enum ScheduleStatus {
  pending
  active
  ended
}

enum ScheduleUserLimitStatus {
  available
  full
}

enum PaymentType {
  bank
  cash
}

enum BookType {
  booking
  walkin
}

model Country {
  id              Int     @id @default(autoincrement())
  name            String  @unique @db.VarChar(70)
  flag_image_path String? @unique
  num_code        String? @db.VarChar(20)
  locale          String  @unique @db.VarChar(10)
  users           User[]

  @@map("countries")
}

model Province {
  id        Int        @id @default(autoincrement())
  name      String     @unique @db.VarChar(70)
  districts District[]

  @@map("provinces")
}

model District {
  id          Int    @id @default(autoincrement())
  name        String @unique @db.VarChar(70)
  province_id Int

  province Province @relation(fields: [province_id], references: [id], onUpdate: Cascade)

  @@map("districts")
}

model Museum {
  id                Int        @id @default(autoincrement())
  name              String     @db.VarChar(70)
  email             String?    @unique
  phone             String     @unique @db.VarChar(15)
  logo_image_path   String?    @unique
  open_time         DateTime?  @db.Time
  close_time        DateTime?  @db.Time
  close_day_of_week String?
  vat_percentage    Int        @db.TinyInt
  vat_pay_type      VatPayType
  vat_auth_date     DateTime?  @db.Date
  vat_auth_code     String?
  latitude          Decimal?   @db.Decimal(8, 6)
  longitude         Decimal?   @db.Decimal(9, 6)
  website           String?    @unique
  address           String     @db.Text
  is_deleted        Boolean
  created_at        DateTime   @default(now())
  updated_at        DateTime   @updatedAt

  users                    User[]
  payment_packages         PaymentPackage[]
  galleries                Gallery[]
  museum_schedules         MuseumSchedule[]
  museum_schedule_payments MuseumSchedulePayment[]
  schedule_times           ScheduleTime[]
  contents                 Content[]
  bookings                 Booking[]
  coupons                  Coupon[]
  prices                   Price[]
  banks                    Bank[]

  @@map("museums")
}

model User {
  id                 Int       @id @default(autoincrement())
  email              String    @unique
  username           String    @unique @db.VarChar(50)
  first_name         String    @db.VarChar(70)
  last_name          String    @db.VarChar(70)
  gender             Gender
  phone              String    @unique @db.VarChar(15)
  is_active          Boolean
  password           String    @unique
  museum_id          Int?
  country_id         Int
  profile_image_path String?   @unique
  last_login_at      DateTime?
  is_deleted         Boolean
  created_at         DateTime  @default(now())
  updated_at         DateTime  @updatedAt

  country                           Country                 @relation(fields: [country_id], references: [id])
  museum                            Museum?                 @relation(fields: [museum_id], references: [id])
  roles                             UserRole[]
  payment_packages                  PaymentPackage[]
  user_museum_schedule_payments     MuseumSchedulePayment[] @relation("user")
  employee_museum_schedule_payments MuseumSchedulePayment[] @relation("employee")
  contents                          Content[]
  galleries                         Gallery[]
  payments                          Payment[]
  bookings                          Booking[]

  @@map("users")
}

model Role {
  id      Int        @id @default(autoincrement())
  name    String     @unique @db.VarChar(40)
  display String     @unique @db.VarChar(50)
  users   UserRole[]

  @@map("roles")
}

model UserRole {
  user_id Int
  role_id Int

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  role Role @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@id([user_id, role_id])
  @@map("user_roles")
}

model MuseumSchedule {
  id                       Int                           @id @default(autoincrement())
  title                    String                        @db.Char(70)
  start_date               DateTime                      @db.Date
  description              String?                       @db.Text
  current_users            Int                           @db.UnsignedInt
  user_limit               Int                           @db.UnsignedInt
  museum_id                Int
  price                    Decimal                       @db.Decimal(10, 2)
  domestic_price           Decimal?                      @db.Decimal(10, 2)
  discount                 Decimal?                      @db.Decimal(10, 2)
  status                   ScheduleStatus
  user_limit_status        ScheduleUserLimitStatus
  payment_museum_schedules MuseumSchedulePaymentDetail[]
  schedule_time_id         Int
  schedule_time            ScheduleTime                  @relation(fields: [schedule_time_id], references: [id], onUpdate: Restrict)

  museum Museum @relation(fields: [museum_id], references: [id])

  @@unique(fields: [title, start_date, schedule_time_id, museum_id], name: "uniq_1")
  @@map("museum_schedules")
}

model ScheduleTime {
  id             Int      @id @default(autoincrement())
  title          String   @db.Char(70)
  start_time     DateTime @db.Time()
  end_time       DateTime @db.Time()
  capacity_limit Int      @db.Int
  museum_id      Int
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  museum_schedules MuseumSchedule[]
  museum           Museum           @relation(fields: [museum_id], references: [id])
  bookings         Booking[]

  @@unique(fields: [title, start_time, end_time, museum_id, capacity_limit], name: "uniq_1")
  @@map("schedule_times")
}

model MuseumSchedulePayment {
  id                       Int                           @id @default(autoincrement())
  user_id                  Int?
  employee_id              Int?
  museum_id                Int
  transaction_id           String
  total                    Decimal                       @db.Decimal(10, 2)
  status                   Status
  bank_name                String?                       @db.VarChar(40)
  payment_type             PaymentType
  payment_date             DateTime
  payment_bank_bill_name   String?
  payment_bank_bill_number String?
  payment_bank_bill_phone  String?                       @db.VarChar(20)
  reference_number         String?
  bank_percentage          Int?                          @db.TinyInt
  bank_percent_amount      Decimal?                      @db.Decimal(10, 2)
  image_path               String?
  info                     String?                       @db.Text
  description              String?                       @db.Text
  created_at               DateTime                      @default(now())
  updated_at               DateTime                      @updatedAt
  museum_schedules         MuseumSchedulePaymentDetail[]
  museum                   Museum                        @relation(fields: [museum_id], references: [id])
  user                     User?                         @relation("user", fields: [user_id], references: [id])
  employee                 User?                         @relation("employee", fields: [employee_id], references: [id])

  @@map("museum_schedule_payments")
}

model MuseumSchedulePaymentDetail {
  payment_museum_schedule_id Int
  museum_schedule_id         Int
  museum_schedule_payment    MuseumSchedulePayment? @relation(fields: [payment_museum_schedule_id], references: [id], onDelete: Cascade)
  museum_schedule            MuseumSchedule?        @relation(fields: [museum_schedule_id], references: [id], onDelete: Cascade)
  user_limit                 Int                    @db.UnsignedInt
  total                      Decimal                @db.Decimal(10, 2)

  @@id([payment_museum_schedule_id, museum_schedule_id])
  @@map("museum_schedule_payment_details")
}

model Package {
  id               Int              @id @default(autoincrement())
  name             String           @db.VarChar(70)
  description      String?          @db.Text
  duration         Int
  free_duration    Int?
  user_limit       Int
  price            Decimal          @db.Decimal(10, 2)
  discount         Decimal?         @db.Decimal(10, 2)
  payment_packages PaymentPackage[]

  @@unique(fields: [name, duration, user_limit, price], name: "uniq_1")
  @@map("packages")
}

model PaymentPackage {
  id                       Int         @id @default(autoincrement())
  museum_id                Int
  user_id                  Int
  transaction_id           String
  package_id               Int
  total                    Decimal     @db.Decimal(10, 2)
  package_start_date       DateTime?
  package_end_date         DateTime?
  discount                 Decimal?    @db.Decimal(10, 2)
  status                   Status
  payment_type             PaymentType
  bank_name                String?     @db.VarChar(40)
  payment_date             DateTime
  payment_bank_bill_name   String?
  payment_bank_bill_number String?
  payment_bank_bill_phone  String?     @db.VarChar(20)
  reference_number         String?
  image_path               String?
  bank_percentage          Int?
  bank_percent_amount      Decimal?    @db.Decimal(10, 2)
  info                     String?     @db.Text
  description              String?     @db.Text
  created_at               DateTime    @default(now())
  updated_at               DateTime    @updatedAt

  museum  Museum   @relation(fields: [museum_id], references: [id])
  user    User?    @relation(fields: [user_id], references: [id])
  package Package? @relation(fields: [package_id], references: [id])

  @@map("payment_packages")
}

model Gallery {
  id          Int     @id @default(autoincrement())
  title       String  @db.VarChar(70)
  description String? @db.Text
  museum_id   Int
  author_id   Int

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  museum          Museum          @relation(fields: [museum_id], references: [id])
  author          User            @relation(fields: [author_id], references: [id])
  gallery_details GalleryDetail[]

  @@map("galleries")
}

model GalleryDetail {
  id                 Int     @id @default(autoincrement())
  title              String? @db.VarChar(70)
  gallery_id         Int
  gallery_image_path String  @unique

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  gallery Gallery @relation(fields: [gallery_id], references: [id], onDelete: Cascade)

  @@map("gallery_details")
}

model Content {
  id                      Int      @id @default(autoincrement())
  title                   String   @db.VarChar(70)
  description             String   @db.Text
  museum_id               Int
  author_id               Int
  main_content_image_path String?  @unique
  created_at              DateTime @default(now())
  updated_at              DateTime @updatedAt

  museum Museum  @relation(fields: [museum_id], references: [id], onDelete: Restrict)
  author User    @relation(fields: [author_id], references: [id], onDelete: Restrict)
  photos Photo[]

  @@unique(fields: [title, museum_id], name: "uniq_1")
  @@map("contents")
}

model Photo {
  id         Int     @id @default(autoincrement())
  title      String? @db.VarChar(70)
  content_id Int
  path       String? @unique
  content    Content @relation(fields: [content_id], references: [id], onDelete: Cascade)

  @@map("photos")
}

model Price {
  id           Int      @id @default(autoincrement())
  title        String   @db.VarChar(70)
  museum_id    Int
  is_foreigner Boolean
  adult_price  Decimal  @db.Decimal(10, 2)
  child_price  Decimal  @db.Decimal(10, 2)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  museum Museum @relation(fields: [museum_id], references: [id], onDelete: Restrict)

  @@unique(fields: [is_foreigner, museum_id], name: "uniq_1")
  @@unique(fields: [title, museum_id], name: "uniq_2")
  @@map("prices")
}

model Booking {
  id                  Int           @id @default(autoincrement())
  museum_id           Int
  user_id             Int?
  booked_at           DateTime
  way                 PaymentWay
  type                PaymentType
  is_foreigner        Boolean
  total               Decimal       @db.Decimal(10, 2)
  total_with_discount Decimal?      @db.Decimal(10, 2)
  total_pay           Decimal?      @db.Decimal(10, 2)
  total_charge        Decimal?      @db.Decimal(10, 2)
  paid_at             DateTime?
  status              Status
  vat_percentage      Int           @default(0)
  vat_amount          Int           @default(0)
  number_of_adult     Int           @default(0)
  number_of_child     Int           @default(0)
  adult_total         Decimal       @default(0) @db.Decimal(10, 2)
  child_total         Decimal       @default(0) @db.Decimal(10, 2)
  discount_type       DiscountType?
  discount_amount     Decimal?      @db.Decimal(10, 2)
  schedule_time_str   String
  schedule_date       DateTime      @db.Date
  schedule_time_id    Int
  people_amount       Int
  created_at          DateTime      @default(now())
  updated_at          DateTime      @updatedAt

  museum        Museum       @relation(fields: [museum_id], references: [id], onDelete: Restrict)
  schedule_time ScheduleTime @relation(fields: [schedule_time_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  user          User?        @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  payments      Payment[]
  tickets       Ticket[]

  @@map("bookings")
}

model Coupon {
  id              Int          @id @default(autoincrement())
  museum_id       Int
  code            String       @db.VarChar(40)
  discount_type   DiscountType
  discount_amount Decimal      @db.Decimal(10, 2)
  expired_date    DateTime     @db.Date
  coupon_status   CouponStatus
  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt
  museum          Museum       @relation(fields: [museum_id], references: [id], onDelete: Restrict)

  @@unique(fields: [code, museum_id], name: "uniq_1")
}

model Payment {
  id                     Int           @id @default(autoincrement())
  booking_id             Int
  user_id                Int?
  transaction_id         String        @unique
  confirmed_image_path   String?       @unique
  way                    PaymentWay
  type                   PaymentType
  is_foreigner           Boolean
  total                  Decimal       @db.Decimal(10, 2)
  total_with_discount    Decimal?      @db.Decimal(10, 2)
  total_pay              Decimal?      @db.Decimal(10, 2)
  total_charge           Decimal?      @db.Decimal(10, 2)
  paid_at                DateTime?
  booked_at              DateTime
  status                 Status
  number_of_adult        Int           @default(0)
  number_of_child        Int           @default(0)
  adult_total            Decimal       @default(0) @db.Decimal(10, 2)
  child_total            Decimal       @default(0) @db.Decimal(10, 2)
  discount_type          DiscountType?
  discount_amount        Decimal?      @db.Decimal(10, 2)
  discount_total         Decimal?      @db.Decimal(10, 2)
  bank_reference_code    String?       @db.VarChar(70)
  bank_bill_number       String?       @db.VarChar(70)
  bank_bill_name         String?       @db.VarChar(70)
  bank_bill_phone        String?       @db.VarChar(70)
  bank_percentage        Decimal?      @db.Decimal(10, 2)
  bank_percentage_amount Decimal?      @db.Decimal(10, 2)
  created_at             DateTime      @default(now())
  updated_at             DateTime      @updatedAt

  booking         Booking         @relation(fields: [booking_id], references: [id], onDelete: Restrict)
  user            User?           @relation(fields: [user_id], references: [id], onDelete: Restrict)
  payment_details PaymentDetail[]

  @@map("payments")
}

model PaymentDetail {
  id            Int       @id @default(autoincrement())
  payment_id    Int
  booking_code  String
  is_printed    Boolean
  is_checked_in Boolean
  checked_at    DateTime?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  payment Payment @relation(fields: [payment_id], references: [id], onDelete: Restrict)

  @@map("payment_details")
}

model Ticket {
  id            Int       @id @default(autoincrement())
  booking_id    Int
  booking_code  String
  is_printed    Boolean
  is_checked_in Boolean
  checked_at    DateTime?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  booking Booking @relation(fields: [booking_id], references: [id], onDelete: Cascade)

  @@map("tickets")
}

model Bank {
  id                Int    @id @default(autoincrement())
  name              String @db.VarChar(70)
  qrcode_image_path String @unique
  museum_id         Int
  museum            Museum @relation(fields: [museum_id], references: [id], onDelete: Cascade)

  @@unique(fields: [name, museum_id], name: "uniq_1")
  @@map("banks")
}
